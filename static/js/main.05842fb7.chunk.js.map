{"version":3,"sources":["Components/firebase.js","Components/CreateQuiz.js","Components/SelectQuiz.js","Components/ShowFinalScore.js","Components/PlayQuiz.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CreateQuiz","handleChange","e","setState","target","name","value","handleClick","preventDefault","quiz","axios","url","method","responseType","params","amount","state","category","selectedCategory","difficulty","token","type","encode","then","response","data","results","props","callQuiz","console","log","showPlay","categories","isLoading","trivia_categories","this","to","id","onChange","map","obj","key","min","max","onClick","Component","SelectQuiz","selectQuiz","quizList","database","ref","once","val","Object","keys","ShowFinalScore","save","quizName","prompt","child","set","score","length","PlayQuiz","questionNumber","setCorrectPosition","currentQuestion","showFinalScore","correct","newScore","correctPosition","Math","floor","random","position","question","incorrect_answers","firstQuestion","listIncorrectAnswers","answer","i","atob","correct_answer","App","dataReady","activeQuizPath","basename","process","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05842fb7.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBvJwO2yQSGErN9NBZQnldxiKSwQSt1mkc\",\r\n    authDomain: \"quarantine-pursuit.firebaseapp.com\",\r\n    databaseURL: \"https://quarantine-pursuit.firebaseio.com\",\r\n    projectId: \"quarantine-pursuit\",\r\n    storageBucket: \"quarantine-pursuit.appspot.com\",\r\n    messagingSenderId: \"800505781023\",\r\n    appId: \"1:800505781023:web:445c432c49eb4bf083ae2a\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nclass CreateQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            categories: [],\r\n            isLoading: true,\r\n            selectedCategory: 0,\r\n            amount: 1,\r\n            difficulty: \"easy\",\r\n            token: \"\",\r\n            showPlay: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api_category.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let categories = response.data.trivia_categories\r\n            this.setState({\r\n                categories,\r\n                isLoading: false,\r\n            })\r\n        })\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api_token.php?command=request',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let token = response.data.token;\r\n\r\n            this.setState({\r\n                token,\r\n            })\r\n            console.log(this.state.token);\r\n        })\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        let quiz = {};\r\n        axios({\r\n            url: 'https://opentdb.com/api.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n            params: {\r\n                amount: this.state.amount,\r\n                category: this.state.selectedCategory,\r\n                difficulty: this.state.difficulty,\r\n                token: this.state.token,\r\n                type: \"multiple\",\r\n                encode: 'base64'\r\n            }\r\n        }).then((response) => {\r\n            quiz = response.data.results;\r\n            this.props.callQuiz(quiz);\r\n            console.log(quiz);\r\n            this.setState({\r\n                showPlay: true\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if (this.state.showPlay === true) {\r\n            return <Link to={\"/play\"}>Play Quiz</Link>;\r\n        }\r\n\r\n        return (\r\n            <form>\r\n                <select name=\"selectedCategory\" id=\"categories\" onChange={this.handleChange}>\r\n                    {this.state.categories.map((obj, id) => {\r\n                        return (<option key={id} value={obj.id}>{obj.name}</option>)\r\n                    })}\r\n                </select>\r\n                <input type=\"number\" name=\"amount\" min=\"0\" max=\"20\" value={this.state.amount} onChange={this.handleChange}></input>\r\n                <button onClick={this.handleClick}>Generate Quiz</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\n\r\n\r\nclass SelectQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            quizList: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n        \r\n        dbRef.once('value', (response) => {\r\n            \r\n            const data = response.val();\r\n            const quizList = Object.keys(data);\r\n            this.setState({\r\n                quizList,\r\n            })\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        this.props.selectQuiz(e.target.name);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div>\r\n            {this.state.quizList.map((quiz) => {\r\n                return (\r\n                    <div key={quiz}>\r\n                    {/* <Link to=\"/x\"> */}\r\n                        <button name={quiz} onClick={this.handleClick}>{quiz}</button>\r\n                    {/* </Link> */}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default SelectQuiz","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\nclass ShowFinalScore extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            quizName: \"\",\r\n        }\r\n    }\r\n\r\n    save = () => {\r\n        let quizName = prompt(\"What would you like to name this quiz\");\r\n\r\n        this.setState({\r\n            quizName,\r\n        })\r\n\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(quizName).set(this.props.quiz);\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n        <h2>Your Score is: {this.props.score}/{this.props.quiz.length}</h2>\r\n        \r\n        <Link to=\"/\"><button>Home</button></Link>\r\n        <button onClick={this.save}>Save Quiz</button>\r\n      </div>\r\n    );\r\n}\r\n    \r\n}\r\n\r\nexport default ShowFinalScore;          ","import React, { Component } from 'react';\r\nimport ShowFinalScore from \"./ShowFinalScore\";\r\n\r\nclass PlayQuiz extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentQuestion: {\r\n        question: ' ',\r\n        incorrect_answers: [],\r\n      },\r\n      questionNumber: 0,\r\n      position: 1,\r\n      score: 0,\r\n      showFinalScore: false,\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('mounted')\r\n    let firstQuestion = this.props.quiz[0];\r\n    this.setState({\r\n      currentQuestion: firstQuestion,\r\n    })\r\n    this.setCorrectPosition();\r\n  }\r\n\r\n  \r\n\r\n  handleClick = () => {\r\n    let questionNumber = this.state.questionNumber\r\n    questionNumber++;\r\n    \r\n    if (questionNumber < this.props.quiz.length ) {\r\n      this.setCorrectPosition();\r\n      console.log(this.state.currentQuestion);\r\n      this.setState({\r\n        questionNumber,\r\n        currentQuestion: this.props.quiz[questionNumber]\r\n      })\r\n    } else {\r\n      console.log(\"end\");\r\n      \r\n      this.setState({\r\n        showFinalScore: true\r\n      })\r\n    }\r\n  }\r\n\r\n  correct = () => {\r\n    let newScore = this.state.score\r\n    newScore++\r\n    this.setState({\r\n      score: newScore\r\n    })\r\n    this.handleClick()\r\n  }\r\n\r\n\r\n  setCorrectPosition = () => {\r\n    let correctPosition = Math.floor(Math.random() * 4);\r\n    this.setState({ \r\n      position: correctPosition\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let incorrectAnswers = this.state.currentQuestion.incorrect_answers;\r\n    // Because array is only 3 objects long, the || statement prints it if the correct answer is in 4th position\r\n    let listIncorrectAnswers = incorrectAnswers.map((answer, i) => {\r\n      if (this.state.position === i || (i === 2 && this.state.position == 3)) {\r\n        return (\r\n          <div>\r\n            <button onClick={this.correct}>{atob(this.state.currentQuestion.correct_answer)}</button>  \r\n            <button onClick={this.handleClick}>{atob(answer)}</button>\r\n          </div>\r\n        );\r\n      } else { \r\n        return <button onClick={this.handleClick}>{atob(answer)}</button>\r\n      }\r\n    });\r\n     \r\n\r\n    return (\r\n      <div>\r\n        { this.state.showFinalScore ? <ShowFinalScore quiz={this.props.quiz} score={this.state.score}/> : null }\r\n        <h2>{atob(this.state.currentQuestion.question)}</h2>\r\n        {listIncorrectAnswers}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayQuiz\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\r\nimport './index.scss';\r\nimport firebase from './Components/firebase.js';\r\n\r\n// Components\r\nimport CreateQuiz from './Components/CreateQuiz';\r\nimport SelectQuiz from './Components/SelectQuiz';\r\nimport PlayQuiz from './Components/PlayQuiz';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activeQuizPath: \"\",\r\n      quiz: [{\r\n        incorrect_answers: [],\r\n      }],\r\n      dataReady: false,\r\n    }\r\n  }\r\n\r\n  callQuiz = (quiz) => {\r\n    this.setState({\r\n      quiz,\r\n    })\r\n    console.log(this.state.quiz);\r\n  }\r\n\r\n  selectQuiz = (quiz) => {\r\n    const dbRef = firebase.database().ref(quiz);\r\n    dbRef.once(\"value\", (response) => {\r\n      const quiz = response.val();\r\n      this.setState({\r\n        quiz,\r\n      })\r\n    }).then(() => {\r\n      console.log('ding')\r\n      this.setState({\r\n        dataReady: true,\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"app\">\r\n          <header>\r\n            <h1>Quarantine Pursuit</h1>\r\n          </header>\r\n          <main>\r\n            <Route exact path=\"/\">\r\n              <Link className=\"button\" to=\"/create\">Create a Quiz!</Link>\r\n              <Link className=\"button\" to=\"/select\">Select an Existing Quiz!</Link>\r\n            </Route>\r\n            <Route path=\"/create\">\r\n              <CreateQuiz callQuiz={this.callQuiz} />\r\n            </Route>\r\n            <Route path=\"/select\">\r\n              <SelectQuiz selectQuiz={this.selectQuiz}/>\r\n            </Route>\r\n\r\n            { this.state.dataReady ? <Redirect to=\"/play\"/> : null }\r\n\r\n            <Route path=\"/play\">\r\n              <PlayQuiz quiz={this.state.quiz} />\r\n            </Route>\r\n          </main>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}