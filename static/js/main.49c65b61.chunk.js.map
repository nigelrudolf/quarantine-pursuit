{"version":3,"sources":["images/logo.png","Components/firebase.js","Components/LoadingAnimation.js","Components/CreateQuiz.js","Components/SelectQuiz.js","Components/ShowFinalScore.js","Components/PlayQuiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoadingAnimation","className","icon","faSync","aria-hidden","CreateQuiz","handleChange","e","setState","target","name","value","handleClick","preventDefault","props","loadingHandler","quiz","axios","url","method","responseType","params","amount","state","category","selectedCategory","difficulty","token","type","encode","then","response","console","log","data","response_code","alert","loadingFalse","results","callQuiz","categories","isLoading","trivia_categories","catch","htmlFor","id","onChange","this","map","obj","key","min","max","onClick","Component","SelectQuiz","selectQuiz","currentTarget","quizList","quizInfo","database","ref","once","val","Object","keys","atob","length","ShowFinalScore","save","quizName","prompt","child","set","score","to","reset","PlayQuiz","nextQuestion","questionNumber","currentQuestion","shuffled","answerFeedback","correct_answer","showFinalScore","correct","newScore","countdown","newTimer","timer","combineAndShuffle","array","i","j","Math","floor","random","temp","question_list","shuffle","incorrect_answers","setInterval","listQuestions","answer","question","App","dataReady","activeQuizPath","correctAnswer","basename","process","src","logo","alt","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.49c65b61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d89ed495.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBvJwO2yQSGErN9NBZQnldxiKSwQSt1mkc\",\n    authDomain: \"quarantine-pursuit.firebaseapp.com\",\n    databaseURL: \"https://quarantine-pursuit.firebaseio.com\",\n    projectId: \"quarantine-pursuit\",\n    storageBucket: \"quarantine-pursuit.appspot.com\",\n    messagingSenderId: \"800505781023\",\n    appId: \"1:800505781023:web:445c432c49eb4bf083ae2a\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconst LoadingAnimation = () => {\n    return (\n        <div className=\"loading-container\">\n            <FontAwesomeIcon icon={faSync} aria-hidden=\"true\" />\n        </div>\n    )\n}\nexport default LoadingAnimation","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass CreateQuiz extends Component {\n    constructor() {\n        super();\n        this.state = {\n            categories: [],\n            isLoading: true,\n            selectedCategory: 0,\n            amount: 1,\n            difficulty: \"easy\",\n            token: \"\",\n        }\n    }\n\n    componentDidMount() {\n\n        axios({\n            url: 'https://opentdb.com/api_category.php',\n            method: 'GET',\n            responseType: 'JSON',\n        }).then((response) => {\n            let categories = response.data.trivia_categories\n            this.setState({\n                categories,\n                isLoading: false,\n            })\n        }).catch(() => {\n            alert(\"I can't seem to connect to my database :'(, please come back later... I'll do better I swear\")\n        })\n\n        axios({\n            url: 'https://opentdb.com/api_token.php?command=request',\n            method: 'GET',\n            responseType: 'JSON',\n        }).then((response) => {\n            let token = response.data.token;\n\n            this.setState({\n                token,\n            })\n            console.log(this.state.token);\n        })\n    }\n\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.loadingHandler();\n        let quiz = {};\n        axios({\n            url: 'https://opentdb.com/api.php',\n            method: 'GET',\n            responseType: 'JSON',\n            params: {\n                amount: this.state.amount,\n                category: this.state.selectedCategory,\n                difficulty: this.state.difficulty,\n                token: this.state.token,\n                type: \"multiple\",\n                encode: 'base64'\n            }\n        }).then((response) => {\n            console.log(response)\n            if (response.data.response_code > 0){\n                alert(\"I'm sorry, there aren't enough questions available in that category. Try again with a lower number of questions or change categories. \")\n                this.props.loadingFalse();\n            }else {\n                quiz = response.data.results;\n                this.props.callQuiz(quiz);\n            }\n        })\n    }\n\n\n    render() {\n\n        return (\n            <form className=\"centered\">\n                <div className=\"inputPair\">\n                    <label htmlFor=\"selectedCategory\" >Choose a Category:</label>\n                    <select name=\"selectedCategory\" id=\"categories\" onChange={this.handleChange}>\n                        {this.state.categories.map((obj, id) => {\n                            return (<option key={id} value={obj.id}>{obj.name}</option>)\n                        })}\n                    </select>\n                </div>\n                <div className=\"inputPair\">\n                    <label htmlFor=\"amount\">Number of Questions:</label>\n                    <p>{this.state.amount}</p>\n                    <input type=\"range\" name=\"amount\" min=\"2\" max=\"20\" value={this.state.amount} onChange={this.handleChange}></input>\n                </div>\n                <div className=\"inputPair\">\n                    <label htmlFor=\"difficulty\" >Choose a Difficulty:</label>\n                    <select name=\"difficulty\" id=\"difficulty\" onChange={this.handleChange}>\n                        <option value=\"easy\">Easy</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"hard\">Hard</option>\n                    </select>\n                </div>\n                <button onClick={this.handleClick}>Generate Quiz</button>\n            </form>\n        );\n    };\n}\n\nexport default CreateQuiz;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass SelectQuiz extends Component {\n    constructor() {\n        super();\n        this.state = {\n            quizList: [],\n            quizInfo: {\n\n            }\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n\n        dbRef.once('value', (response) => {\n\n            const data = response.val();\n            console.log(data)\n            const quizList = Object.keys(data);\n\n            this.setState({\n                quizList,\n                quizInfo: data,\n            })\n        })\n    }\n\n    handleClick = (e) => {\n        this.props.selectQuiz(e.currentTarget.name);\n    }\n\n    render() {\n\n        return (\n            <div>\n                {\n                    this.state.quizList.map((quiz) => {\n                        console.log('mapping')\n                        return (\n                            <div className=\"centered selectQuiz\" key={quiz}>\n                                {console.log(quiz)}\n\n                                <button name={quiz} onClick={this.handleClick}>\n\n                                    <h3>{quiz}</h3>\n\n                                    <p>Category: {atob(this.state.quizInfo[quiz][0].category)}</p>\n                                    <p>{this.state.quizInfo[quiz].length} Questions</p>\n                                    <p>Difficulty: {atob(this.state.quizInfo[quiz][0].difficulty)}</p>\n\n                                </button>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default SelectQuiz","import React, { Component } from 'react';\nimport { BrowserRouter as Link } from 'react-router-dom';\nimport firebase from './firebase';\n\nclass ShowFinalScore extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            quizName: \"\",\n        }\n    }\n\n    save = () => {\n        let quizName = prompt(\"What would you like to name this quiz\");\n\n        this.setState({\n            quizName,\n        })\n\n        const dbRef = firebase.database().ref();\n        dbRef.child(quizName).set(this.props.quiz);\n    }\n\n   \n    render() {\n        return (\n        <div className=\"centered\">\n            \n            <h2>Your Score is: {this.props.score}/{this.props.quiz.length}</h2>\n            \n            <Link to=\"/\"><button onClick={this.props.reset}>Home</button></Link>\n            <button onClick={this.save}>Save Quiz</button>\n        </div>\n    );\n}\n    \n}\n\nexport default ShowFinalScore;          ","import React, { Component } from 'react';\nimport ShowFinalScore from \"./ShowFinalScore\";\n\nclass PlayQuiz extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentQuestion: this.props.quiz[0],\n      questionNumber: 0,\n      score: 0,\n      showFinalScore: false,\n      question_list: [],\n      shuffled: false,\n      answerFeedback: \"\",\n      timer: 30\n    }\n  }\n\n  componentDidMount() {\n    this.combineAndShuffle();\n    setInterval(this.countdown, 1000)\n\n  }\n\n  componentDidUpdate() {\n    if (this.state.shuffled === false) {\n      this.combineAndShuffle();\n      this.setState({\n        shuffled: true\n      })\n    }\n\n    if (this.state.timer === 0) {\n      this.nextQuestion();\n      // Prevents infinite loop on last page \n      this.setState({\n        timer: 30,\n      })\n    }\n  }\n\n  nextQuestion = () => {\n    let questionNumber = this.state.questionNumber\n    questionNumber++;\n    //Sets the currentQuestion state to next question in array\n    if (questionNumber < this.props.quiz.length) {\n      console.log(this.state.currentQuestion);\n      this.setState({\n        questionNumber,\n        currentQuestion: this.props.quiz[questionNumber],\n        shuffled: false,\n        answerFeedback: `The Correct Answer Was: ${atob(this.state.currentQuestion.correct_answer)}`\n      })\n      //Shows final score screen if we answered last question in arra\n    } else {\n      this.setState({\n        showFinalScore: true\n      })\n    }\n    console.log(this.state.answerFeedback);\n  }\n\n  handleClick = (e) => {\n    this.nextQuestion();\n    if (this.state.currentQuestion.correct_answer === e.target.name) {\n      this.correct();\n    }\n  }\n\n  correct = () => {\n    let newScore = this.state.score\n    newScore++\n    this.setState({\n      score: newScore,\n      answerFeedback: \"Correct!\"\n    })\n  }\n\n  reset = () => {\n    this.setState({\n      questionNumber: 0,\n      score: 0,\n      showFinalScore: false,\n    })\n    this.props.reset();\n  }\n\n  countdown = () => {\n    let newTimer = this.state.timer - 1;\n    this.setState({\n      timer: newTimer\n    })\n  }\n\n  combineAndShuffle = () => {\n\n    let array = [...this.state.currentQuestion.incorrect_answers, this.state.currentQuestion.correct_answer];\n\n    const shuffle = (array) => {\n      let i = array.length - 1\n      for (i; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n      this.setState({\n        question_list: array,\n        timer: 30\n      })\n\n    }\n\n    shuffle(array);\n  }\n\n  render() {\n\n    let listQuestions = this.state.question_list.map((answer, i) => {\n      return <button className=\"answerButtons\" name={answer} key={i} onClick={this.handleClick}>{atob(answer)}</button>\n    })\n\n    let timer = () => {\n      if (this.state.timer >= 20) {\n        return <p className=\"timerGreen\">{this.state.timer}</p>\n      } else if (this.state.timer <= 20 && this.state.timer >= 10) {\n        return <p className=\"timerYellow\">{this.state.timer}</p>\n      } else {\n        return <p className=\"timerRed\">{this.state.timer}</p>\n      }\n    }\n\n\n    return (\n      <div>\n        {this.state.showFinalScore ? (\n          <div>\n            {this.state.answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{this.state.answerFeedback}</h2> : <h2 className=\"incorrect\">{this.state.answerFeedback}</h2>}\n            <ShowFinalScore quiz={this.props.quiz} score={this.state.score} reset={this.reset} />\n            {console.log(this.state.answerFeedback)}\n          </div>\n        )\n          : (\n            <div className=\"centered\">\n              {/* CONTROLS CLASSNAME TO ALLOW STYLING DIFFERENCED BETWEEN CORRECT AND INCORRECT */}\n              {this.state.answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{this.state.answerFeedback}</h2> : <h2 className=\"incorrect\">{this.state.answerFeedback}</h2>}\n              {timer()}\n              <h2 className=\"question\">{atob(this.state.currentQuestion.question)}</h2>\n              {listQuestions}\n            </div>\n          )}\n\n      </div>\n    )\n  }\n}\n\nexport default PlayQuiz","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\nimport './index.scss';\nimport firebase from './Components/firebase.js';\nimport LoadingAnimation from './Components/LoadingAnimation.js';\nimport logo from './images/logo.png';\n\n// Components\nimport CreateQuiz from './Components/CreateQuiz';\nimport SelectQuiz from './Components/SelectQuiz';\nimport PlayQuiz from './Components/PlayQuiz';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeQuizPath: \"\",\n      quiz: [{\n        question: '',\n        correctAnswer: '',\n        incorrect_answers: [],\n      }],\n      dataReady: false,\n      isLoading: false,\n    }\n  }\n\n  callQuiz = (quiz) => {\n    this.setState({\n      quiz,\n      dataReady: true,\n      isLoading: false,\n    })\n    console.log(this.state.quiz);\n  }\n\n  selectQuiz = (quiz) => {\n    const dbRef = firebase.database().ref(quiz);\n    dbRef.once(\"value\", (response) => {\n      const quiz = response.val();\n      this.setState({\n        quiz,\n      })\n    }).then(() => {\n      this.setState({\n        dataReady: true,\n        isLoading: false,\n      })\n    })\n\n  }\n\n  reset = () => {\n    this.setState({\n      activeQuizPath: \"\",\n      quiz: [{\n        question: '',\n        correctAnswer: '',\n        incorrect_answers: [],\n      }],\n      dataReady: false,\n    })\n    console.log('reset');\n  }\n\n  loadingHandler = () => {\n    this.setState({\n      isLoading: true,\n    })\n  }\n\n  loadingFalse = () => {\n    this.setState({\n      isLoading: false,\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <header>\n          <h1 className=\"sr-only\">Qurantine Pursuit</h1>\n          <img src={logo} alt=\"Logo for Qurantine Pursuit\" />\n        </header>\n        <main>\n          \n          <Route exact path=\"/\">\n            <button><Link to=\"/create\">Create a Quiz!</Link></button>\n            <button><Link to=\"/select\">Select an Existing Quiz!</Link></button>\n          </Route>\n\n          <Route path=\"/create\">\n            <div className=\"loadingHelper\">\n            {this.state.isLoading ? <LoadingAnimation /> : null}\n            <CreateQuiz callQuiz={this.callQuiz} loadingHandler={this.loadingHandler} loadingFalse={this.loadingFalse}/>\n            </div>\n          </Route>\n\n          <Route path=\"/select\">\n            <SelectQuiz selectQuiz={this.selectQuiz} />\n          </Route>\n\n          {/* If quiz has been loaded redirect user to play, otherwise redirect to home (in case they refresh on child component) */}\n          {this.state.dataReady ? <Redirect to=\"/play\" /> : <Redirect to=\"/\"/>}\n\n          <Route path=\"/play\">\n            <PlayQuiz quiz={this.state.quiz} reset={this.reset} />\n          </Route>\n        </main>\n      </Router>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}