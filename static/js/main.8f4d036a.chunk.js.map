{"version":3,"sources":["images/logo.png","Components/firebase.js","Components/LoadingAnimation.js","Components/CreateQuiz.js","Components/SelectQuiz.js","Components/ShowFinalScore.js","Components/PlayQuiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoadingAnimation","className","icon","faSync","aria-hidden","CreateQuiz","handleChange","e","setState","target","name","value","handleClick","preventDefault","props","loadingHandler","quiz","axios","url","method","responseType","params","amount","state","category","selectedCategory","difficulty","token","type","encode","then","response","data","response_code","alert","loadingFalse","results","callQuiz","categories","isLoading","trivia_categories","catch","htmlFor","id","onChange","this","map","obj","key","min","max","onClick","Component","SelectQuiz","selectQuiz","currentTarget","quizList","quizInfo","database","ref","once","val","Object","keys","decodeURIComponent","length","ShowFinalScore","score","to","reset","quizName","prompt","child","set","PlayQuiz","nextQuestion","questionNumber","currentQuestion","shuffled","answerFeedback","correct_answer","showFinalScore","correct","newScore","countdown","newTimer","timer","combineAndShuffle","array","i","j","Math","floor","random","temp","question_list","shuffle","incorrect_answers","setInterval","listQuestions","answer","question","App","dataReady","correctAnswer","basename","process","src","logo","alt","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.8f4d036a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d89ed495.png\";","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBvJwO2yQSGErN9NBZQnldxiKSwQSt1mkc\",\r\n    authDomain: \"quarantine-pursuit.firebaseapp.com\",\r\n    databaseURL: \"https://quarantine-pursuit.firebaseio.com\",\r\n    projectId: \"quarantine-pursuit\",\r\n    storageBucket: \"quarantine-pursuit.appspot.com\",\r\n    messagingSenderId: \"800505781023\",\r\n    appId: \"1:800505781023:web:445c432c49eb4bf083ae2a\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <FontAwesomeIcon icon={faSync} aria-hidden=\"true\" />\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CreateQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            categories: [],\r\n            isLoading: true,\r\n            selectedCategory: 0,\r\n            amount: 1,\r\n            difficulty: \"easy\",\r\n            token: \"\",\r\n        }\r\n    }\r\n\r\n    // Fetching categories and a session token\r\n    componentDidMount() {\r\n        axios({\r\n            url: 'https://opentdb.com/api_category.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let categories = response.data.trivia_categories\r\n            this.setState({\r\n                categories,\r\n                isLoading: false,\r\n            })\r\n        }).catch(() => {\r\n            alert(\"I can't seem to connect to my database :'(. Please come back later... I'll do better I swear\")\r\n        })\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api_token.php?command=request',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let token = response.data.token;\r\n            this.setState({\r\n                token,\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    // This sends the API request with the user selected values and stores that in state\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        this.props.loadingHandler();\r\n        let quiz = {};\r\n        axios({\r\n            url: 'https://opentdb.com/api.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n            params: {\r\n                amount: this.state.amount,\r\n                category: this.state.selectedCategory,\r\n                difficulty: this.state.difficulty,\r\n                token: this.state.token,\r\n                type: \"multiple\",\r\n                encode: 'url3986'\r\n            }\r\n        }).then((response) => {\r\n            if (response.data.response_code > 0) {\r\n                alert(\"I'm sorry, there aren't enough questions available in that category. Try again with a lower number of questions or change categories. \")\r\n                this.props.loadingFalse();\r\n            } else {\r\n                quiz = response.data.results;\r\n                this.props.callQuiz(quiz);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"centered\">\r\n                <div className=\"inputPair\">\r\n                    <label htmlFor=\"selectedCategory\" >Choose a Category:</label>\r\n                    <select name=\"selectedCategory\" id=\"categories\" onChange={this.handleChange}>\r\n                        {this.state.categories.map((obj, id) => {\r\n                            return (<option key={id} value={obj.id}>{obj.name}</option>)\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"inputPair\">\r\n                    <label htmlFor=\"amount\">Number of Questions:</label>\r\n                    <p>{this.state.amount}</p>\r\n                    <input type=\"range\" name=\"amount\" min=\"2\" max=\"20\" value={this.state.amount} onChange={this.handleChange}></input>\r\n                </div>\r\n                <div className=\"inputPair\">\r\n                    <label htmlFor=\"difficulty\" >Choose a Difficulty:</label>\r\n                    <select name=\"difficulty\" id=\"difficulty\" onChange={this.handleChange}>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n                </div>\r\n                <button onClick={this.handleClick}>Generate Quiz</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass SelectQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            quizList: [],\r\n            quizInfo: {}\r\n        }\r\n    }\r\n\r\n    // Fetching data from Firebase and displaying to user\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.once('value', (response) => {\r\n            const data = response.val();\r\n            const quizList = Object.keys(data);\r\n            this.setState({\r\n                quizList,\r\n                quizInfo: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        this.props.selectQuiz(e.currentTarget.name);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.quizList.map((quiz) => {\r\n                    return (\r\n                        <div className=\"centered selectQuiz\" key={quiz}>\r\n                            <button name={quiz} onClick={this.handleClick}>\r\n                                <h3>{quiz}</h3>\r\n                                <p>Category: {decodeURIComponent(this.state.quizInfo[quiz][0].category)}</p>\r\n                                <p>{this.state.quizInfo[quiz].length} Questions</p>\r\n                                <p>Difficulty: {decodeURIComponent(this.state.quizInfo[quiz][0].difficulty)}</p>\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectQuiz;","import React from 'react';\r\nimport { BrowserRouter as Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\nfunction ShowFinalScore(props) {\r\n    const save = function () {\r\n        let quizName = prompt(\"What would you like to name this quiz?\");\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(quizName).set(props.quiz);\r\n    }\r\n\r\n    return (\r\n        <div className=\"centered\">\r\n            <h2>Your Score is: {props.score}/{props.quiz.length}</h2>\r\n            <Link to=\"/\"><button onClick={props.reset}>Home</button></Link>\r\n            <button onClick={save}>Save Quiz</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowFinalScore;          ","import React, { Component } from 'react';\r\nimport ShowFinalScore from \"./ShowFinalScore\";\r\n\r\nclass PlayQuiz extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentQuestion: this.props.quiz[0],\r\n      questionNumber: 0,\r\n      score: 0,\r\n      showFinalScore: false,\r\n      question_list: [],\r\n      shuffled: false,\r\n      answerFeedback: \"\",\r\n      timer: 30\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.combineAndShuffle();\r\n    setInterval(this.countdown, 1000)\r\n  }\r\n\r\n  // Shuffles answers everytime component updates(to mix in correct answer)\r\n  componentDidUpdate() {\r\n    if (this.state.shuffled === false) {\r\n      this.combineAndShuffle();\r\n      this.setState({\r\n        shuffled: true\r\n      })\r\n    }\r\n\r\n    if (this.state.timer === 0) {\r\n      this.nextQuestion();\r\n      // Prevents infinite loop on last page \r\n      this.setState({\r\n        timer: 30,\r\n      })\r\n    }\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    let questionNumber = this.state.questionNumber\r\n    questionNumber++;\r\n    //Sets the currentQuestion state to next question in array\r\n    if (questionNumber < this.props.quiz.length) {\r\n      this.setState({\r\n        questionNumber,\r\n        currentQuestion: this.props.quiz[questionNumber],\r\n        shuffled: false,\r\n        // decodeURIComponent is decoding from base64\r\n        answerFeedback: `The Correct Answer Was: ${decodeURIComponent(this.state.currentQuestion.correct_answer)}`\r\n      })\r\n      //Shows final score screen if we answered last question in arra\r\n    } else {\r\n      this.setState({\r\n        showFinalScore: true\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    this.nextQuestion();\r\n    if (this.state.currentQuestion.correct_answer === e.target.name) {\r\n      this.correct();\r\n    }\r\n  }\r\n\r\n  correct = () => {\r\n    let newScore = this.state.score\r\n    newScore++\r\n    this.setState({\r\n      score: newScore,\r\n      answerFeedback: \"Correct!\"\r\n    })\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      questionNumber: 0,\r\n      score: 0,\r\n      showFinalScore: false,\r\n    })\r\n    this.props.reset();\r\n  }\r\n\r\n  countdown = () => {\r\n    let newTimer = this.state.timer - 1;\r\n    this.setState({\r\n      timer: newTimer\r\n    })\r\n  }\r\n\r\n  combineAndShuffle = () => {\r\n    //creates a new array with all answers - both correct and incorrect answers\r\n    let array = [...this.state.currentQuestion.incorrect_answers, this.state.currentQuestion.correct_answer];\r\n    // uses Fisher Yates shuffle to randomize\r\n    const shuffle = (array) => {\r\n      let i = array.length - 1\r\n      for (i; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp\r\n      }\r\n      this.setState({\r\n        question_list: array,\r\n        timer: 30\r\n      })\r\n    }\r\n    shuffle(array);\r\n  }\r\n\r\n  render() {\r\n    let listQuestions = this.state.question_list.map((answer, i) => {\r\n      return <button className=\"answerButtons\" name={answer} key={i} onClick={this.handleClick}>{decodeURIComponent(answer)}</button>\r\n    })\r\n\r\n    // Changes timer background color\r\n    let timer = () => {\r\n      if (this.state.timer >= 20) {\r\n        return <p className=\"timerGreen\">{this.state.timer}</p>\r\n      } else if (this.state.timer <= 20 && this.state.timer >= 10) {\r\n        return <p className=\"timerYellow\">{this.state.timer}</p>\r\n      } else {\r\n        return <p className=\"timerRed\">{this.state.timer}</p>\r\n      }\r\n    }\r\n\r\n    const { showFinalScore, answerFeedback, score, currentQuestion } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {showFinalScore ? (\r\n          <div>\r\n            {answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{answerFeedback}</h2> : <h2 className=\"incorrect\">{answerFeedback}</h2>}\r\n            <ShowFinalScore quiz={this.props.quiz} score={score} reset={this.reset} />\r\n          </div>\r\n        )\r\n          : (\r\n            <div className=\"centered\">\r\n              {/* CONTROLS CLASSNAME TO ALLOW STYLING DIFFERENCED BETWEEN CORRECT AND INCORRECT */}\r\n              {answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{answerFeedback}</h2> : <h2 className=\"incorrect\">{answerFeedback}</h2>}\r\n              {timer()}\r\n              <h2 className=\"question\">{decodeURIComponent(currentQuestion.question)}</h2>\r\n              {listQuestions}\r\n            </div>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayQuiz;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\r\nimport './index.scss';\r\nimport firebase from './Components/firebase.js';\r\nimport LoadingAnimation from './Components/LoadingAnimation.js';\r\nimport logo from './images/logo.png';\r\n\r\n// Components\r\nimport CreateQuiz from './Components/CreateQuiz';\r\nimport SelectQuiz from './Components/SelectQuiz';\r\nimport PlayQuiz from './Components/PlayQuiz';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      quiz: [{\r\n        question: '',\r\n        correctAnswer: '',\r\n        incorrect_answers: [],\r\n      }],\r\n      dataReady: false,\r\n      isLoading: false,\r\n    }\r\n  }\r\n\r\n  // Get quiz data from CreateQuiz component then once dataReady is true redirects to PlayQuiz component\r\n  callQuiz = (quiz) => {\r\n    this.setState({\r\n      quiz,\r\n      dataReady: true,\r\n      isLoading: false,\r\n    })\r\n  }\r\n\r\n  // Get quiz data from SelectQuiz component then once dataReady is true redirects to PlayQuiz component\r\n  selectQuiz = (quiz) => {\r\n    const dbRef = firebase.database().ref(quiz);\r\n    dbRef.once(\"value\", (response) => {\r\n      const quiz = response.val();\r\n      this.setState({\r\n        quiz,\r\n      })\r\n    }).then(() => {\r\n      this.setState({\r\n        dataReady: true,\r\n        isLoading: false,\r\n      })\r\n    })\r\n  }\r\n\r\n  // Reset is called after users finish a quiz\r\n  reset = () => {\r\n    this.setState({\r\n      quiz: [{\r\n        question: '',\r\n        correctAnswer: '',\r\n        incorrect_answers: [],\r\n      }],\r\n      dataReady: false,\r\n    })\r\n  }\r\n\r\n  // renders loading logo \r\n  loadingHandler = () => {\r\n    this.setState({\r\n      isLoading: true,\r\n    })\r\n  }\r\n  // removes loading logo\r\n  loadingFalse = () => {\r\n    this.setState({\r\n      isLoading: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <header>\r\n          <h1 className=\"sr-only\">Qurantine Pursuit</h1>\r\n          <img src={logo} alt=\"Logo for Qurantine Pursuit\" />\r\n        </header>\r\n        <main>\r\n\r\n          <Route exact path=\"/\">\r\n            <button><Link to=\"/create\">Create a Quiz!</Link></button>\r\n            <button><Link to=\"/select\">Select an Existing Quiz!</Link></button>\r\n          </Route>\r\n\r\n          <Route path=\"/create\">\r\n            <div className=\"loadingHelper\">\r\n              {this.state.isLoading ? <LoadingAnimation /> : null}\r\n              <CreateQuiz callQuiz={this.callQuiz} loadingHandler={this.loadingHandler} loadingFalse={this.loadingFalse} />\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path=\"/select\">\r\n            <SelectQuiz selectQuiz={this.selectQuiz} />\r\n          </Route>\r\n\r\n          {/* If quiz has been loaded redirect user to play, otherwise redirect to home (in case they refresh on child component) */}\r\n          {this.state.dataReady ? <Redirect to=\"/play\" /> : <Redirect to=\"/\" />}\r\n\r\n          <Route path=\"/play\">\r\n            <PlayQuiz quiz={this.state.quiz} reset={this.reset} />\r\n          </Route>\r\n        </main>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}