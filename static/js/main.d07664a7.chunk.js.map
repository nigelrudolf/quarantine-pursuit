{"version":3,"sources":["images/logo.png","Components/firebase.js","Components/LoadingAnimation.js","Components/CreateQuiz.js","Components/SelectQuiz.js","Components/ShowFinalScore.js","Components/PlayQuiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoadingAnimation","className","icon","faSync","aria-hidden","CreateQuiz","handleChange","e","setState","target","name","value","handleClick","preventDefault","props","loadingHandler","quiz","axios","url","method","responseType","params","amount","state","category","selectedCategory","difficulty","token","type","encode","then","response","console","log","data","response_code","alert","loadingFalse","results","callQuiz","categories","isLoading","trivia_categories","catch","htmlFor","id","onChange","this","map","obj","key","min","max","onClick","Component","SelectQuiz","selectQuiz","quizList","database","ref","once","val","Object","keys","ShowFinalScore","save","quizName","prompt","child","set","score","length","to","reset","PlayQuiz","questionNumber","currentQuestion","shuffled","answerFeedback","atob","correct_answer","showFinalScore","correct","newScore","combineAndShuffle","array","i","j","Math","floor","random","temp","question_list","shuffle","incorrect_answers","listQuestions","answer","question","App","dataReady","activeQuizPath","correctAnswer","basename","process","src","logo","alt","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d07664a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d89ed495.png\";","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBvJwO2yQSGErN9NBZQnldxiKSwQSt1mkc\",\r\n    authDomain: \"quarantine-pursuit.firebaseapp.com\",\r\n    databaseURL: \"https://quarantine-pursuit.firebaseio.com\",\r\n    projectId: \"quarantine-pursuit\",\r\n    storageBucket: \"quarantine-pursuit.appspot.com\",\r\n    messagingSenderId: \"800505781023\",\r\n    appId: \"1:800505781023:web:445c432c49eb4bf083ae2a\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nconst LoadingAnimation = () => {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <FontAwesomeIcon icon={faSync} aria-hidden=\"true\" />\r\n        </div>\r\n    )\r\n}\r\nexport default LoadingAnimation","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nclass CreateQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            categories: [],\r\n            isLoading: true,\r\n            selectedCategory: 0,\r\n            amount: 1,\r\n            difficulty: \"easy\",\r\n            token: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api_category.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let categories = response.data.trivia_categories\r\n            this.setState({\r\n                categories,\r\n                isLoading: false,\r\n            })\r\n        }).catch(() => {\r\n            alert(\"I can't seem to connect to my database :'(, please come back later... I'll do better I swear\")\r\n        })\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api_token.php?command=request',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n        }).then((response) => {\r\n            let token = response.data.token;\r\n\r\n            this.setState({\r\n                token,\r\n            })\r\n            console.log(this.state.token);\r\n        })\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        e.preventDefault();\r\n        this.props.loadingHandler();\r\n        let quiz = {};\r\n        axios({\r\n            url: 'https://opentdb.com/api.php',\r\n            method: 'GET',\r\n            responseType: 'JSON',\r\n            params: {\r\n                amount: this.state.amount,\r\n                category: this.state.selectedCategory,\r\n                difficulty: this.state.difficulty,\r\n                token: this.state.token,\r\n                type: \"multiple\",\r\n                encode: 'base64'\r\n            }\r\n        }).then((response) => {\r\n            console.log(response)\r\n            if (response.data.response_code > 0){\r\n                alert(\"I'm sorry, there aren't enough questions available in that category. Try again with a lower number of questions or change categories. \")\r\n                this.props.loadingFalse();\r\n            }else {\r\n                quiz = response.data.results;\r\n                this.props.callQuiz(quiz);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form className=\"centered\">\r\n                <div className=\"inputPair\">\r\n                    <label htmlFor=\"selectedCategory\" >Choose a Category:</label>\r\n                    <select name=\"selectedCategory\" id=\"categories\" onChange={this.handleChange}>\r\n                        {this.state.categories.map((obj, id) => {\r\n                            return (<option key={id} value={obj.id}>{obj.name}</option>)\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"inputPair\">\r\n                    <label htmlFor=\"amount\">Number of Questions:</label>\r\n                    <p>{this.state.amount}</p>\r\n                    <input type=\"range\" name=\"amount\" min=\"1\" max=\"20\" value={this.state.amount} onChange={this.handleChange}></input>\r\n                </div>\r\n                <button onClick={this.handleClick}>Generate Quiz</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default CreateQuiz;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\n\r\n\r\nclass SelectQuiz extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            quizList: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref();\r\n        \r\n        dbRef.once('value', (response) => {\r\n            \r\n            const data = response.val();\r\n            const quizList = Object.keys(data);\r\n            this.setState({\r\n                quizList,\r\n            })\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        this.props.selectQuiz(e.target.name);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <div>\r\n            {this.state.quizList.map((quiz) => {\r\n                return (\r\n                    <div key={quiz}>\r\n                    {/* <Link to=\"/x\"> */}\r\n                        <button name={quiz} onClick={this.handleClick}>{quiz}</button>\r\n                    {/* </Link> */}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default SelectQuiz","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport firebase from './firebase';\r\n\r\nclass ShowFinalScore extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            quizName: \"\",\r\n        }\r\n    }\r\n\r\n    save = () => {\r\n        let quizName = prompt(\"What would you like to name this quiz\");\r\n\r\n        this.setState({\r\n            quizName,\r\n        })\r\n\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(quizName).set(this.props.quiz);\r\n    }\r\n\r\n   \r\n    render() {\r\n        return (\r\n        <div className=\"centered\">\r\n            <h2>Your Score is: {this.props.score}/{this.props.quiz.length}</h2>\r\n            \r\n            <Link to=\"/\"><button onClick={this.props.reset}>Home</button></Link>\r\n            <button onClick={this.save}>Save Quiz</button>\r\n        </div>\r\n    );\r\n}\r\n    \r\n}\r\n\r\nexport default ShowFinalScore;          ","import React, { Component } from 'react';\r\nimport ShowFinalScore from \"./ShowFinalScore\";\r\nimport { BrowserRouter as Redirect } from 'react-router-dom';\r\n\r\nclass PlayQuiz extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentQuestion: this.props.quiz[0],\r\n      questionNumber: 0,\r\n      score: 0,\r\n      showFinalScore: false,\r\n      question_list: [],\r\n      shuffled: false,\r\n      answerFeedback: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.combineAndShuffle();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.shuffled === false){\r\n      this.combineAndShuffle()\r\n      this.setState({\r\n        shuffled: true\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    let questionNumber = this.state.questionNumber\r\n    questionNumber++;\r\n    //Sets the currentquestion state to next question in array\r\n    if (questionNumber < this.props.quiz.length ) {\r\n      console.log(this.state.currentQuestion);\r\n      this.setState({\r\n        questionNumber,\r\n        currentQuestion: this.props.quiz[questionNumber],\r\n        shuffled: false,\r\n        answerFeedback: `The Correct Answer Was: ${atob(this.state.currentQuestion.correct_answer)}`\r\n      })\r\n      //Shows final score screen if we answered last question in arra\r\n    } else {\r\n      this.setState({\r\n        showFinalScore: true\r\n      })\r\n    }\r\n\r\n\r\n    if (this.state.currentQuestion.correct_answer === e.target.name){\r\n      this.correct();\r\n      console.log('ding')\r\n    }\r\n  }\r\n\r\n  correct = () => {\r\n    let newScore = this.state.score\r\n    newScore++\r\n    this.setState({\r\n      score: newScore,\r\n      answerFeedback: \"Correct!\"\r\n    })\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      // currentQuestion: {\r\n      //   correctAnswer: '',\r\n      //   question: '',\r\n      //   incorrect_answers: [],\r\n      // },\r\n      questionNumber: 0,\r\n      score: 0,\r\n      showFinalScore: false,\r\n    })\r\n    this.props.reset();\r\n  }\r\n\r\n  combineAndShuffle = () => {\r\n    let array = [...this.state.currentQuestion.incorrect_answers, this.state.currentQuestion.correct_answer];\r\n\r\n      const shuffle = (array) => {\r\n        let i = array.length - 1\r\n        for ( i; i > 0; i-- ) {\r\n          const j = Math.floor(Math.random() * i)\r\n          const temp = array[i]\r\n          array[i] = array[j]\r\n          array[j] = temp\r\n        }\r\n        this.setState({\r\n          question_list: array,\r\n        })\r\n      \r\n      }\r\n\r\n    shuffle(array);\r\n  }\r\n\r\n  render() {\r\n    \r\n    let listQuestions = this.state.question_list.map((answer, i) =>{\r\n      return <button className=\"answerButtons\" name={answer} key={i} onClick={this.handleClick}>{atob(answer)}</button>\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        {this.state.showFinalScore ? <ShowFinalScore quiz={this.props.quiz} score={this.state.score} reset={this.reset} /> : ( \r\n          <div className=\"centered\">\r\n            {/* CONTROLS CLASSNAME TO ALLOW STYLING DIFFERENCED BETWEEN CORRECT AND INCORRECT */}\r\n            {this.state.answerFeedback == \"Correct!\" ? <h2 className=\"correct\">{this.state.answerFeedback}</h2>: <h2 className=\"incorrect\">{this.state.answerFeedback}</h2>}\r\n            <h2>{atob(this.state.currentQuestion.question)}</h2>\r\n            {listQuestions}\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlayQuiz","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\r\nimport './index.scss';\r\nimport firebase from './Components/firebase.js';\r\nimport LoadingAnimation from './Components/LoadingAnimation.js';\r\nimport logo from './images/logo.png';\r\n\r\n// Components\r\nimport CreateQuiz from './Components/CreateQuiz';\r\nimport SelectQuiz from './Components/SelectQuiz';\r\nimport PlayQuiz from './Components/PlayQuiz';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activeQuizPath: \"\",\r\n      quiz: [{\r\n        question: '',\r\n        correctAnswer: '',\r\n        incorrect_answers: [],\r\n      }],\r\n      dataReady: false,\r\n      isLoading: false,\r\n    }\r\n  }\r\n\r\n  callQuiz = (quiz) => {\r\n    this.setState({\r\n      quiz,\r\n      dataReady: true,\r\n      isLoading: false,\r\n    })\r\n    console.log(this.state.quiz);\r\n  }\r\n\r\n  selectQuiz = (quiz) => {\r\n    const dbRef = firebase.database().ref(quiz);\r\n    dbRef.once(\"value\", (response) => {\r\n      const quiz = response.val();\r\n      this.setState({\r\n        quiz,\r\n      })\r\n    }).then(() => {\r\n      this.setState({\r\n        dataReady: true,\r\n        isLoading: false,\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      activeQuizPath: \"\",\r\n      quiz: [{\r\n        question: '',\r\n        correctAnswer: '',\r\n        incorrect_answers: [],\r\n      }],\r\n      dataReady: false,\r\n    })\r\n    console.log('reset');\r\n  }\r\n\r\n  loadingHandler = () => {\r\n    this.setState({\r\n      isLoading: true,\r\n    })\r\n  }\r\n\r\n  loadingFalse = () => {\r\n    this.setState({\r\n      isLoading: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n          <header>\r\n            <h1 className=\"sr-only\">Qurantine Pursuit</h1>\r\n            <img src={logo} alt=\"Logo for Qurantine Pursuit\" />\r\n          </header>\r\n          <main>\r\n            \r\n            <Route exact path=\"/\">\r\n              <button><Link to=\"/create\">Create a Quiz!</Link></button>\r\n              <button><Link to=\"/select\">Select an Existing Quiz!</Link></button>\r\n            </Route>\r\n            <Route path=\"/create\">\r\n              <div className=\"loadingHelper\">\r\n              {this.state.isLoading ? <LoadingAnimation /> : null}\r\n              <CreateQuiz callQuiz={this.callQuiz} loadingHandler={this.loadingHandler} loadingFalse={this.loadingFalse}/>\r\n              </div>\r\n            </Route>\r\n            <Route path=\"/select\">\r\n              <SelectQuiz selectQuiz={this.selectQuiz} />\r\n            </Route>\r\n\r\n            {/* If quiz has been loaded redirect user to play, otherwise redirect to home (in case they refresh on child component) */}\r\n            {this.state.dataReady ? <Redirect to=\"/play\" /> : <Redirect to=\"/\"/>}\r\n\r\n            <Route path=\"/play\">\r\n              <PlayQuiz quiz={this.state.quiz} reset={this.reset} />\r\n            </Route>\r\n          </main>\r\n      </Router >\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}