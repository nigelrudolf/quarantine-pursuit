{"version":3,"sources":["images/logo.png","Components/firebase.js","Components/LoadingAnimation.js","Components/CreateQuiz.js","Components/SelectQuiz.js","Components/ShowFinalScore.js","Components/PlayQuiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoadingAnimation","className","icon","faSync","aria-hidden","CreateQuiz","handleChange","e","setState","target","name","value","handleClick","preventDefault","props","loadingHandler","quiz","axios","url","method","responseType","params","amount","state","category","selectedCategory","difficulty","token","type","encode","then","response","data","response_code","alert","loadingFalse","results","callQuiz","categories","isLoading","trivia_categories","catch","htmlFor","id","onChange","this","map","obj","key","min","max","onClick","Component","SelectQuiz","selectQuiz","currentTarget","quizList","quizInfo","database","ref","once","val","Object","keys","atob","length","ShowFinalScore","score","to","reset","quizName","prompt","child","set","PlayQuiz","nextQuestion","questionNumber","currentQuestion","shuffled","answerFeedback","decodeURIComponent","correct_answer","showFinalScore","correct","newScore","countdown","newTimer","timer","combineAndShuffle","array","i","j","Math","floor","random","temp","question_list","shuffle","incorrect_answers","setInterval","listQuestions","answer","question","App","dataReady","console","log","correctAnswer","basename","process","src","logo","alt","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d3a390f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d89ed495.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBvJwO2yQSGErN9NBZQnldxiKSwQSt1mkc\",\n    authDomain: \"quarantine-pursuit.firebaseapp.com\",\n    databaseURL: \"https://quarantine-pursuit.firebaseio.com\",\n    projectId: \"quarantine-pursuit\",\n    storageBucket: \"quarantine-pursuit.appspot.com\",\n    messagingSenderId: \"800505781023\",\n    appId: \"1:800505781023:web:445c432c49eb4bf083ae2a\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconst LoadingAnimation = () => {\n    return (\n        <div className=\"loading-container\">\n            <FontAwesomeIcon icon={faSync} aria-hidden=\"true\" />\n        </div>\n    )\n}\nexport default LoadingAnimation","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass CreateQuiz extends Component {\n    constructor() {\n        super();\n        this.state = {\n            categories: [],\n            isLoading: true,\n            selectedCategory: 0,\n            amount: 1,\n            difficulty: \"easy\",\n            token: \"\",\n        }\n    }\n\n    // Fetching categories and a session token\n    componentDidMount() {\n        axios({\n            url: 'https://opentdb.com/api_category.php',\n            method: 'GET',\n            responseType: 'JSON',\n        }).then((response) => {\n            let categories = response.data.trivia_categories\n            this.setState({\n                categories,\n                isLoading: false,\n            })\n        }).catch(() => {\n            alert(\"I can't seem to connect to my database :'(. Please come back later... I'll do better I swear\")\n        })\n\n        axios({\n            url: 'https://opentdb.com/api_token.php?command=request',\n            method: 'GET',\n            responseType: 'JSON',\n        }).then((response) => {\n            let token = response.data.token;\n            this.setState({\n                token,\n            })\n        })\n    }\n\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // This sends the API request with the user selected values and stores that in state\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.loadingHandler();\n        let quiz = {};\n        axios({\n            url: 'https://opentdb.com/api.php',\n            method: 'GET',\n            responseType: 'JSON',\n            params: {\n                amount: this.state.amount,\n                category: this.state.selectedCategory,\n                difficulty: this.state.difficulty,\n                token: this.state.token,\n                type: \"multiple\",\n                encode: 'url3986'\n            }\n        }).then((response) => {\n            if (response.data.response_code > 0) {\n                alert(\"I'm sorry, there aren't enough questions available in that category. Try again with a lower number of questions or change categories. \")\n                this.props.loadingFalse();\n            } else {\n                quiz = response.data.results;\n                this.props.callQuiz(quiz);\n            }\n        })\n    }\n\n\n    render() {\n\n        return (\n            <form className=\"centered\">\n                <div className=\"inputPair\">\n                    <label htmlFor=\"selectedCategory\" >Choose a Category:</label>\n                    <select name=\"selectedCategory\" id=\"categories\" onChange={this.handleChange}>\n                        {this.state.categories.map((obj, id) => {\n                            return (<option key={id} value={obj.id}>{obj.name}</option>)\n                        })}\n                    </select>\n                </div>\n                <div className=\"inputPair\">\n                    <label htmlFor=\"amount\">Number of Questions:</label>\n                    <p>{this.state.amount}</p>\n                    <input type=\"range\" name=\"amount\" min=\"2\" max=\"20\" value={this.state.amount} onChange={this.handleChange}></input>\n                </div>\n                <div className=\"inputPair\">\n                    <label htmlFor=\"difficulty\" >Choose a Difficulty:</label>\n                    <select name=\"difficulty\" id=\"difficulty\" onChange={this.handleChange}>\n                        <option value=\"easy\">Easy</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"hard\">Hard</option>\n                    </select>\n                </div>\n                <button onClick={this.handleClick}>Generate Quiz</button>\n            </form>\n        );\n    };\n}\n\nexport default CreateQuiz;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass SelectQuiz extends Component {\n    constructor() {\n        super();\n        this.state = {\n            quizList: [],\n            quizInfo: {}\n        }\n    }\n\n    // Fetching data from Firebase and displaying to user\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n        dbRef.once('value', (response) => {\n            const data = response.val();\n            const quizList = Object.keys(data);\n            this.setState({\n                quizList,\n                quizInfo: data,\n            })\n        })\n    }\n\n    handleClick = (e) => {\n        this.props.selectQuiz(e.currentTarget.name);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.quizList.map((quiz) => {\n                    return (\n                        <div className=\"centered selectQuiz\" key={quiz}>\n                            <button name={quiz} onClick={this.handleClick}>\n                                <h3>{quiz}</h3>\n                                <p>Category: {atob(this.state.quizInfo[quiz][0].category)}</p>\n                                <p>{this.state.quizInfo[quiz].length} Questions</p>\n                                <p>Difficulty: {atob(this.state.quizInfo[quiz][0].difficulty)}</p>\n                            </button>\n                        </div>\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nexport default SelectQuiz;","import React from 'react';\nimport { BrowserRouter as Link } from 'react-router-dom';\nimport firebase from './firebase';\n\nfunction ShowFinalScore(props) {\n    const save = function () {\n        let quizName = prompt(\"What would you like to name this quiz?\");\n        const dbRef = firebase.database().ref();\n        dbRef.child(quizName).set(props.quiz);\n    }\n\n    return (\n        <div className=\"centered\">\n            <h2>Your Score is: {props.score}/{props.quiz.length}</h2>\n            <Link to=\"/\"><button onClick={props.reset}>Home</button></Link>\n            <button onClick={save}>Save Quiz</button>\n        </div>\n    );\n}\n\nexport default ShowFinalScore;          ","import React, { Component } from 'react';\nimport ShowFinalScore from \"./ShowFinalScore\";\n\nclass PlayQuiz extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentQuestion: this.props.quiz[0],\n      questionNumber: 0,\n      score: 0,\n      showFinalScore: false,\n      question_list: [],\n      shuffled: false,\n      answerFeedback: \"\",\n      timer: 30\n    }\n  }\n\n  componentDidMount() {\n    this.combineAndShuffle();\n    setInterval(this.countdown, 1000)\n  }\n\n  // Shuffles answers everytime component updates(to mix in correct answer)\n  componentDidUpdate() {\n    if (this.state.shuffled === false) {\n      this.combineAndShuffle();\n      this.setState({\n        shuffled: true\n      })\n    }\n\n    if (this.state.timer === 0) {\n      this.nextQuestion();\n      // Prevents infinite loop on last page \n      this.setState({\n        timer: 30,\n      })\n    }\n  }\n\n  nextQuestion = () => {\n    let questionNumber = this.state.questionNumber\n    questionNumber++;\n    //Sets the currentQuestion state to next question in array\n    if (questionNumber < this.props.quiz.length) {\n      this.setState({\n        questionNumber,\n        currentQuestion: this.props.quiz[questionNumber],\n        shuffled: false,\n        // decodeURIComponent is decoding from base64\n        answerFeedback: `The Correct Answer Was: ${decodeURIComponent(this.state.currentQuestion.correct_answer)}`\n      })\n      //Shows final score screen if we answered last question in arra\n    } else {\n      this.setState({\n        showFinalScore: true\n      })\n    }\n  }\n\n  handleClick = (e) => {\n    this.nextQuestion();\n    if (this.state.currentQuestion.correct_answer === e.target.name) {\n      this.correct();\n    }\n  }\n\n  correct = () => {\n    let newScore = this.state.score\n    newScore++\n    this.setState({\n      score: newScore,\n      answerFeedback: \"Correct!\"\n    })\n  }\n\n  reset = () => {\n    this.setState({\n      questionNumber: 0,\n      score: 0,\n      showFinalScore: false,\n    })\n    this.props.reset();\n  }\n\n  countdown = () => {\n    let newTimer = this.state.timer - 1;\n    this.setState({\n      timer: newTimer\n    })\n  }\n\n  combineAndShuffle = () => {\n    //creates a new array with all answers - both correct and incorrect answers\n    let array = [...this.state.currentQuestion.incorrect_answers, this.state.currentQuestion.correct_answer];\n    // uses Fisher Yates shuffle to randomize\n    const shuffle = (array) => {\n      let i = array.length - 1\n      for (i; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n      }\n      this.setState({\n        question_list: array,\n        timer: 30\n      })\n    }\n    shuffle(array);\n  }\n\n  render() {\n    let listQuestions = this.state.question_list.map((answer, i) => {\n      return <button className=\"answerButtons\" name={answer} key={i} onClick={this.handleClick}>{decodeURIComponent(answer)}</button>\n    })\n\n    // Changes timer background color\n    let timer = () => {\n      if (this.state.timer >= 20) {\n        return <p className=\"timerGreen\">{this.state.timer}</p>\n      } else if (this.state.timer <= 20 && this.state.timer >= 10) {\n        return <p className=\"timerYellow\">{this.state.timer}</p>\n      } else {\n        return <p className=\"timerRed\">{this.state.timer}</p>\n      }\n    }\n\n    const { showFinalScore, answerFeedback, score, currentQuestion } = this.state;\n\n    return (\n      <div>\n        {showFinalScore ? (\n          <div>\n            {answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{answerFeedback}</h2> : <h2 className=\"incorrect\">{answerFeedback}</h2>}\n            <ShowFinalScore quiz={this.props.quiz} score={score} reset={this.reset} />\n          </div>\n        )\n          : (\n            <div className=\"centered\">\n              {/* CONTROLS CLASSNAME TO ALLOW STYLING DIFFERENCED BETWEEN CORRECT AND INCORRECT */}\n              {answerFeedback === \"Correct!\" ? <h2 className=\"correct\">{answerFeedback}</h2> : <h2 className=\"incorrect\">{answerFeedback}</h2>}\n              {timer()}\n              <h2 className=\"question\">{decodeURIComponent(currentQuestion.question)}</h2>\n              {listQuestions}\n            </div>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default PlayQuiz;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\nimport './index.scss';\nimport firebase from './Components/firebase.js';\nimport LoadingAnimation from './Components/LoadingAnimation.js';\nimport logo from './images/logo.png';\n\n// Components\nimport CreateQuiz from './Components/CreateQuiz';\nimport SelectQuiz from './Components/SelectQuiz';\nimport PlayQuiz from './Components/PlayQuiz';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      quiz: [{\n        question: '',\n        correctAnswer: '',\n        incorrect_answers: [],\n      }],\n      dataReady: false,\n      isLoading: false,\n    }\n  }\n\n  // Get quiz data from CreateQuiz component then once dataReady is true redirects to PlayQuiz component\n  callQuiz = (quiz) => {\n    this.setState({\n      quiz,\n      dataReady: true,\n      isLoading: false,\n    })\n    console.log(this.state.quiz);\n  }\n\n  // Get quiz data from SelectQuiz component then once dataReady is true redirects to PlayQuiz component\n  selectQuiz = (quiz) => {\n    const dbRef = firebase.database().ref(quiz);\n    dbRef.once(\"value\", (response) => {\n      const quiz = response.val();\n      this.setState({\n        quiz,\n      })\n    }).then(() => {\n      this.setState({\n        dataReady: true,\n        isLoading: false,\n      })\n    })\n  }\n\n  // Reset is called after users finish a quiz\n  reset = () => {\n    this.setState({\n      quiz: [{\n        question: '',\n        correctAnswer: '',\n        incorrect_answers: [],\n      }],\n      dataReady: false,\n    })\n  }\n\n  // renders loading logo \n  loadingHandler = () => {\n    this.setState({\n      isLoading: true,\n    })\n  }\n  // removes loading logo\n  loadingFalse = () => {\n    this.setState({\n      isLoading: false,\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <header>\n          <h1 className=\"sr-only\">Qurantine Pursuit</h1>\n          <img src={logo} alt=\"Logo for Qurantine Pursuit\" />\n        </header>\n        <main>\n\n          <Route exact path=\"/\">\n            <button><Link to=\"/create\">Create a Quiz!</Link></button>\n            <button><Link to=\"/select\">Select an Existing Quiz!</Link></button>\n          </Route>\n\n          <Route path=\"/create\">\n            <div className=\"loadingHelper\">\n              {this.state.isLoading ? <LoadingAnimation /> : null}\n              <CreateQuiz callQuiz={this.callQuiz} loadingHandler={this.loadingHandler} loadingFalse={this.loadingFalse} />\n            </div>\n          </Route>\n\n          <Route path=\"/select\">\n            <SelectQuiz selectQuiz={this.selectQuiz} />\n          </Route>\n\n          {/* If quiz has been loaded redirect user to play, otherwise redirect to home (in case they refresh on child component) */}\n          {this.state.dataReady ? <Redirect to=\"/play\" /> : <Redirect to=\"/\" />}\n\n          <Route path=\"/play\">\n            <PlayQuiz quiz={this.state.quiz} reset={this.reset} />\n          </Route>\n        </main>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}